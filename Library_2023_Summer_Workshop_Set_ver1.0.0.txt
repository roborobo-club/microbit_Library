//ライブラリ：PID制御
//ver1.0.0
//ライブラリ「NXTmotor(ロボロボ製)」の前提ライブラリ

//% weight=40 color=#ce0037
//% block="PID"
namespace PID{
    let PID_Value = 0
    let PID_Value_P = 0
    let PID_Value_D = 0
    let PID_Value_I = 0
    let PID_Gain_P = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    let PID_Gain_D = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    let PID_Gain_I = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    let PID_Deviation_Now = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    let PID_Deviation_Previous = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    let PID_Deviation_Total = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    let PID_Flag = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    let PID_Counter_Conat = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    let PID_Counter_Zero = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

    //% weight=1000
    //% inlineInputMode=inline
    //% Channel.min=0 Channel.max=9
    //% block="PID フラグ チャンネル $Channel"
    export function Flag(Channel:number) {
        return PID_Flag[Channel]
    }

    //% weight=990
    //% inlineInputMode=inline
    //% Channel.min=0 Channel.max=9
    //% block="PID ゲインの定義 チャンネル $Channel P $Gain_P I $Gain_I D $Gain_D"
    export function Gain(Channel:number,Gain_P: number, Gain_I: number, Gain_D: number) {
        PID_Gain_P[Channel] = Gain_P
        PID_Gain_I[Channel] = Gain_I
        PID_Gain_D[Channel] = Gain_D
    }

    //% weight=980
    //% inlineInputMode=inline
    //% Channel.min=0 Channel.max=9
    //% block="PID チャンネル $Channel 偏差 $Deviation I制御範囲 $I_Range 零点初期化 $I_Zero_Reset"
    export function Value(Channel: number,Deviation: number, I_Range: number, I_Zero_Reset: boolean) {
        // P制御
        PID_Deviation_Now[Channel] = Deviation
        PID_Value_P = PID_Deviation_Now[Channel] * PID_Gain_P[Channel]
       
        // I制御
        if (Math.abs(PID_Deviation_Now[Channel]) < I_Range) {
            PID_Deviation_Total[Channel] = PID_Deviation_Total[Channel] + PID_Deviation_Now[Channel]
        } else {
            PID_Deviation_Total[Channel] = 0
        }
        if (I_Zero_Reset && Math.abs(PID_Deviation_Previous[Channel]) / PID_Deviation_Previous[Channel] != Math.abs(PID_Deviation_Now[Channel]) / PID_Deviation_Now[Channel]) {
            PID_Deviation_Total[Channel] = 0
        }
        PID_Value_I = PID_Deviation_Total[Channel] * PID_Gain_I[Channel]
       
        // D制御
        PID_Value_D = (PID_Deviation_Now[Channel] - PID_Deviation_Previous[Channel]) * PID_Gain_D[Channel]
        PID_Deviation_Previous = PID_Deviation_Now

        // 合計
        PID_Value = PID_Value_P + PID_Value_I + PID_Value_D

        //フラグ管理
        if (Math.abs(PID_Deviation_Now[Channel]) < 1) {
            PID_Counter_Zero[Channel] = PID_Counter_Zero[Channel] + 1
        } else {
            PID_Counter_Zero[Channel] = 0
        }
        if (PID_Deviation_Now = PID_Deviation_Previous) {
            PID_Counter_Conat[Channel] = PID_Counter_Conat[Channel] + 1
        } else {
            PID_Counter_Conat[Channel] = 0
        }
        if (PID_Counter_Zero[Channel] > 4 || PID_Counter_Conat[Channel] > 50) {
            PID_Flag[Channel] = 1
        } else {
            PID_Flag[Channel] = 0
        }
        return PID_Value        
    }

    //% weight=980
    //% inlineInputMode=inline
    //% Channel.min=0 Channel.max=9
    //% block="PID 初期化 チャンネル $Channel"
    export function Reset(Channel: number) {
        PID_Deviation_Total[Channel] = 0
        PID_Deviation_Previous[Channel] = 0
        PID_Flag[Channel] = 0
        PID_Counter_Zero[Channel] = 0
        PID_Counter_Conat[Channel] = 0
    }
}

//ライブラリ：NXTモーター
//ver1.0.0
//前提ライブラリ「PCA9685」「PID(ロボロボ製)」
enum Lib_NXT_Motor_Port {
    //% block="Motor1"
    Zero,
    //% block="Motor2"
    One,
}

enum Lib_NXT_Motor_Brake {
    //% block="惰性ブレーキ"
    Zero,
    //% block="ロックブレーキ"
    One
}

enum Lib_NXT_Motor_Rotate_Method {
    //% block="度"
    Zero,
    //% block="回転"
    One
}

enum Lib_NXT_Motor_Unit {
    //% block="度"
    Zero,
    //% block="回転"
    One,
    //% block="rad"
    Two
}

enum Lib_NXT_Motor_Speed_Unit {
    //% block="度/s"
    Zero,
    //% block="回転/s"
    One,
    //% block="rad/s"
    Two
}

enum Lib_NXT_Motor_Direction {
    //% block="時計回り"
    Zero,
    //% block="反時計回り"
    One,
}

//% color=#feb81c
//% weight=30
//% block="NXT モーター"
namespace NXTmotor {
    let Motor_Unit_Return = 0
    let Motor_Unit_Val = 0
    let PID_Power_B = 0
    let PID_Power_A = 0
    let PID_Power = 0
    let PID_Value = 0
    let PID_Target = 0
    let Motor_Duty_Previous = [0, 0]
    let Motor_Steering_AB = [0, 0]
    let Motor_Angle_Rotate = [0, 0]
    let Motor_Angle_Basis = [0, 0]
    let Motor_Angle_Sensor = [0, 0]
    let Motor_Angle_In = [0, 0]
    let Motor_Speed = [0, 0, 0]
    let Motor_Angle_Pin = [112, 115]

    //単位変換関数 度⇔回転⇔rad
    function Motor_Unit_Converter(Unit: Lib_NXT_Motor_Unit): number {
        if (Unit == 0) {
            Motor_Unit_Return = 1
        } else if (Unit == 1) {
            Motor_Unit_Return = 1 / 360
        } else {
            Motor_Unit_Return = 0.0174533
        }
        return Motor_Unit_Return;
    }

    //回転制御：PID
    //select:0.Aモータ,1.Bモータ,2.前進,3.旋回
    function Motor_PID(Select: number, Power: number, Tagert: number, Unit: Lib_NXT_Motor_Unit, Brake: Lib_NXT_Motor_Brake) {
        PID.Reset(9)
        if (Select == 1) {
            PID_Target = Tagert / Motor_Unit_Converter(Unit) + Displacement(Lib_NXT_Motor_Port.One, Lib_NXT_Motor_Unit.Zero)
        } else {
            PID_Target = Tagert / Motor_Unit_Converter(Unit) + Displacement(Lib_NXT_Motor_Port.Zero, Lib_NXT_Motor_Unit.Zero)
        }
        while (PID.Flag(9) == 0) {
            if (Select == 1) {
                PID_Value = Math.round(PID.Value(9,PID_Target - Displacement(Lib_NXT_Motor_Port.One, Lib_NXT_Motor_Unit.Zero),  12, true))
            } else {
                PID_Value = Math.round(PID.Value(9,PID_Target - Displacement(Lib_NXT_Motor_Port.Zero, Lib_NXT_Motor_Unit.Zero),  12, true))
            }
            if (Math.abs(PID_Value) < Math.abs(Power)) {
                PID_Power = PID_Value
            } else {
                PID_Power = Power
            }
            if (Select == 0) {
                PID_Power_A = PID_Power
                PID_Power_B = 0
            } else if (Select == 1) {
                PID_Power_A = 0
                PID_Power_B = PID_Power
            } else if (Select == 2) {
                PID_Power_A = PID_Power
                PID_Power_B = PID_Power
            } else if (Select == 3) {
                PID_Power_A = PID_Power
                PID_Power_B = 0 - PID_Power
            }
            Rotate(Lib_NXT_Motor_Port.Zero, PID_Power_A)
            Rotate(Lib_NXT_Motor_Port.One, PID_Power_B)
            basic.pause(50)
        }
        if (Select == 0) {
            Stop(Lib_NXT_Motor_Port.Zero, Brake)
        } else if (Select == 1) {
            Stop(Lib_NXT_Motor_Port.One, Brake)
        } else if (Select == 2) {
            Stop(Lib_NXT_Motor_Port.Zero, Brake)
            Stop(Lib_NXT_Motor_Port.One, Brake)
        } else if (Select == 3) {
            Stop(Lib_NXT_Motor_Port.Zero, Brake)
            Stop(Lib_NXT_Motor_Port.One, Brake)
        } 
    }

    //% weight=1010
    //% inlineInputMode=inline
    //% block="モーターの起動"
    export function Setup() {
        PCA9685.reset(64)
        PID.Gain(9,1,0.08,3)
    }

    //% weight=1000
    //% inlineInputMode=inline
    /**
     Port.A:P13,Port.B:P16
     「正パルスが入力されたとき」ブロックの中に入れる
     */
    //% inlineInputMode=inline
    //% block="回転数センサー パルス $Port"
    export function Pulse(Port: Lib_NXT_Motor_Port) {
        if (pins.digitalReadPin(Motor_Angle_Pin[Port]) == 0) {
            Motor_Angle_In[Port] += 2
        } else if (pins.digitalReadPin(Motor_Angle_Pin[Port]) == 1) {
            Motor_Angle_In[Port] += -2
        }
    }

    //% weight=990
    //% Duty.min=-100 Duty.max=100
    //% inlineInputMode=inline
    //% block="$Port を駆動開始 $Duty ％"
    export function Rotate(Port: Lib_NXT_Motor_Port, Duty: number) {
        if (Motor_Duty_Previous[Port] != Duty) {
            PCA9685.setLedDutyCycle(3 * Port + 1, Math.abs(Duty), 64)
            PCA9685.setLedDutyCycle(3 * Port + 2, Math.floor((Math.abs(Duty) - Duty) / (-2 * Duty - 0.1)) * 100, 64)
            PCA9685.setLedDutyCycle(3 * Port + 3, Math.floor((Math.abs(Duty) + Duty) / (2 * Duty - 0.1)) * 100, 64)
            Motor_Duty_Previous[Port] = Duty
        }
    }

    //% weight=980
    //% inlineInputMode=inline
    //% block="$Port を停止 $Brake"
    export function Stop(Port: Lib_NXT_Motor_Port, Brake: Lib_NXT_Motor_Brake) {
        PCA9685.setLedDutyCycle(3 * Port + 1, Brake * 100, 64)
        PCA9685.setLedDutyCycle(3 * Port + 2, Brake * 100, 64)
        PCA9685.setLedDutyCycle(3 * Port + 3, Brake * 100, 64)
        Motor_Duty_Previous[Port] = 0
    }

    //% weight=970
    //% Duty.min=-100 Duty.max=100 
    //% inlineInputMode=inline
    //% block="$Port を駆動 $Duty ％ $Target $Unit $Brake"
    export function Angle(Port: Lib_NXT_Motor_Port, Duty: number, Target: number, Unit: Lib_NXT_Motor_Unit, Brake: Lib_NXT_Motor_Brake) {
        Motor_PID(Port, Duty, Target, Unit, Brake)
    }

    //% weight=960
    //% inlineInputMode=inline
    //% DutyA.min=-100 DutyA.max=100
    //% DutyB.min=-100 DutyB.max=100
    //% block="移動を開始 $DutyA ％ $DutyB ％"
    export function Drive(DutyA: number, DutyB: number) {
        Rotate(0, DutyA)
        Rotate(1, DutyB)
    }

    //% weight=955
    //% inlineInputMode=inline
    //% Duty.min=-100 Duty.max=100
    //% Steering.min=-100 Steering.max=100
    //% block="ステアリング移動 $Duty ％ 向き $Steering"
    export function Steering(Duty: number, Steering: number) {
        if (Steering == 0) {
            Motor_Steering_AB[0] = 1
            Motor_Steering_AB[1] = 1
        } else if (Steering > 0) {
            Motor_Steering_AB[0] = 1
            Motor_Steering_AB[1] = (100 - 2 * Math.abs(Steering)) / 100
        } else {
            Motor_Steering_AB[0] = (100 - 2 * Math.abs(Steering)) / 100
            Motor_Steering_AB[1] = 1
        }

        Rotate(0, Duty * Motor_Steering_AB[0])
        Rotate(1, Duty * Motor_Steering_AB[1])
    }

    //% weight=950
    //% inlineInputMode=inline
    //% block="移動を停止 $Brake"
    export function DriveStop(Brake: Lib_NXT_Motor_Brake) {
        Stop(0, Brake)
        Stop(1, Brake)
    }

    //% weight=945
    //% Duty.min=-100 Duty.max=100 
    //% inlineInputMode=inline
    //% block="直進 $Duty ％ $Target $Unit $Brake"
    export function Straight(Duty: number, Target: number, Unit: Lib_NXT_Motor_Unit, Brake: Lib_NXT_Motor_Brake) {
        Motor_PID(2, Duty, Target, Unit, Brake)
    }

    //% weight=943
    //% Duty.min=-100 Duty.max=100 
    //% inlineInputMode=inline
    //% block="旋回 $Direction $Duty ％ $Target $Unit $Brake"
    export function Turn(Direction: Lib_NXT_Motor_Direction, Duty: number, Target: number, Unit: Lib_NXT_Motor_Unit, Brake: Lib_NXT_Motor_Brake) {
        if (Direction==0){
            Motor_PID(3,- Duty,- Target, Unit, Brake)
        }else{
            Motor_PID(3,Duty,Target, Unit, Brake)
        }
        
    }

    //% weight=940
    //% inlineInputMode=inline
    //% block="回転数センサーを初期化 $Port"
    export function Reset(Port: Lib_NXT_Motor_Port) {
        Motor_Angle_Basis[Port] = Motor_Angle_In[Port]
    }

    //% weight=930
    //% inlineInputMode=inline
    //% block="回転数センサー $Port $Unit"
    export function Displacement(Port: Lib_NXT_Motor_Port, Unit: Lib_NXT_Motor_Unit) {
        return Math.floor((Motor_Angle_In[Port] - Motor_Angle_Basis[Port]) * Motor_Unit_Converter(Unit) * 100) / 100;
    }

    //% weight=920
    //% inlineInputMode=inline
    //% block="角速度センサー $Port $Unit"
    export function Velocity(Port: Lib_NXT_Motor_Port, Unit: Lib_NXT_Motor_Speed_Unit) {
        Motor_Unit_Val = Unit
        Motor_Speed[0] = Motor_Angle_In[Port]
        basic.pause(50)
        Motor_Speed[1] = Motor_Angle_In[Port]
        Motor_Speed[2] = (Motor_Speed[1] - Motor_Speed[0]) * 20 * Motor_Unit_Converter(Motor_Unit_Val)
        return Math.floor(Motor_Speed[2] * 100) / 100;
    }

    /**
     初期値 P:1 I:0.08 D:3
     */
    //% weight=910
    //% inlineInputMode=inline
    //% block="モーター ゲインの設定 P $PGain I $IGain D $DGain"
    export function Gain(PGain: number, IGain: number, DGain: number) {
        PID.Gain(9,PGain,IGain,DGain)
    }
}

//ライブラリ：TCS34725
//ver1.0.0

enum Lib_TCS34725_LRGB {
    //% block="光"
    Zero,
    //% block="赤"
    One,
    //% block="緑"
    Two,
    //% block="青"
    Three,
}

enum Lib_TCS34725_LRGB_ALL {
    //% block="光"
    Zero,
    //% block="赤"
    One,
    //% block="緑"
    Two,
    //% block="青"
    Three,
    //% block="全"
    Four,
}

enum Lib_TCS34725_Gain {
    //% block="*1"
    Zero,
    //% block="*4"
    One,
    //% block="*16"
    Two,
    //% block="*60"
    Three,
}

enum Lib_TCS34725_Symbol {
    //% block="="
    Zero,
    //% block="≠"
    One,
    //% block="<"
    Two,
    //% block="≦"
    Three,
    //% block=">"
    Four,
    //% block="≧"
    Five,
}

enum Lib_TCS34725_MM {
    //% block="最大値"
    Zero,
    //% block="最小値"
    One,
}

//% color=#0177c8
//% weight=20
namespace TCS34725 {
    let TCS34725_ADDRESS = 0
    let Lib_TCS34725_Gain_Def = 0
    let TCS34725_i = 0
    let TCS34725_val_D = 0
    let TCS34725_val_U = 0
    let TCS34725_Color_Color_Def = 0
    let TCS34725_AD_MM_Coordinate = 0
    let TCS34725_AD_Cor = 0
    let TCS34725_TF = false
    let TCS34725_I2C = [41, 42]
    let TCS34725_Total = [0, 0, 0, 0]
    let TCS34725_Lib_TCS34725_LRGB = [0, 0, 0, 0, 0, 0, 0, 0]
    let TCS34725_AD_MM = [2147483647, 2147483647, 2147483647, 2147483647, 0, 0, 0, 0, 0, 0, 2147483647, 2147483647, 2147483647, 2147483647, 0, 0, 0, 0]
    //[1Lmin,1Rmin,1Gmin,1Bmin,1Lmax,1Rmax,1Gmax,1Bmax,0,0,2Lmin,2Rmin,2Gmin,2Bmin,2Lmax,2Rmax,2Gmax,2Bmax]
    let TCS34725_Color_Name = ["Light", "R", "G", "B"]

    let Port = 0

    function GetValue(Port_Get: number) {
        TCS34725_ADDRESS = TCS34725_I2C[Port_Get]
        pins.i2cWriteNumber(
            TCS34725_ADDRESS,
            148,
            NumberFormat.UInt8LE,
            true
        )
        TCS34725_Lib_TCS34725_LRGB[0] = pins.i2cReadNumber(TCS34725_ADDRESS, NumberFormat.UInt8LE, true)
        TCS34725_Lib_TCS34725_LRGB[1] = pins.i2cReadNumber(TCS34725_ADDRESS, NumberFormat.UInt8LE, false)
        pins.i2cWriteNumber(
            TCS34725_ADDRESS,
            150,
            NumberFormat.UInt8LE,
            true
        )
        TCS34725_Lib_TCS34725_LRGB[2] = pins.i2cReadNumber(TCS34725_ADDRESS, NumberFormat.UInt8LE, true)
        TCS34725_Lib_TCS34725_LRGB[3] = pins.i2cReadNumber(TCS34725_ADDRESS, NumberFormat.UInt8LE, false)
        pins.i2cWriteNumber(
            TCS34725_ADDRESS,
            152,
            NumberFormat.UInt8LE,
            true
        )
        TCS34725_Lib_TCS34725_LRGB[4] = pins.i2cReadNumber(TCS34725_ADDRESS, NumberFormat.UInt8LE, true)
        TCS34725_Lib_TCS34725_LRGB[5] = pins.i2cReadNumber(TCS34725_ADDRESS, NumberFormat.UInt8LE, false)
        pins.i2cWriteNumber(
            TCS34725_ADDRESS,
            154,
            NumberFormat.UInt8LE,
            true
        )
        TCS34725_Lib_TCS34725_LRGB[6] = pins.i2cReadNumber(TCS34725_ADDRESS, NumberFormat.UInt8LE, true)
        TCS34725_Lib_TCS34725_LRGB[7] = pins.i2cReadNumber(TCS34725_ADDRESS, NumberFormat.UInt8LE, false)
        TCS34725_i = 0
        for (let index = 0; index < 4; index++) {
            TCS34725_val_D = TCS34725_Lib_TCS34725_LRGB[2 * TCS34725_i]
            TCS34725_val_U = TCS34725_Lib_TCS34725_LRGB[2 * TCS34725_i + 1]
            TCS34725_Total[TCS34725_i] = TCS34725_val_U * 256 + TCS34725_val_D
            TCS34725_i += 1
        }
    }

    function GetValueMin(Color: Lib_TCS34725_LRGB, Initialization: boolean) {
        TCS34725_AD_MM_Coordinate = 10 * Port + Color
        if (Initialization) {
            TCS34725_AD_MM[TCS34725_AD_MM_Coordinate] = 2147483647
        }
        GetValue(Port)
        for (let index = 0; index < 10; index++) {
            GetValue(Port)
            if (TCS34725_Total[Color] < TCS34725_AD_MM[TCS34725_AD_MM_Coordinate]) {
                TCS34725_AD_MM[TCS34725_AD_MM_Coordinate] = TCS34725_Total[Color]
            }
        }
    }

    function GetValueMax(Color: Lib_TCS34725_LRGB, Initialization: boolean) {
        TCS34725_AD_MM_Coordinate = 10 * Port + Color + 4
        if (Initialization) {
            TCS34725_AD_MM[TCS34725_AD_MM_Coordinate] = 0
        }
        GetValue(Port)
        for (let index = 0; index < 10; index++) {
            GetValue(Port)
            if (TCS34725_Total[Color] > TCS34725_AD_MM[TCS34725_AD_MM_Coordinate]) {
                TCS34725_AD_MM[TCS34725_AD_MM_Coordinate] = TCS34725_Total[Color]
            }
        }
    }

    function GetValueMinALL(Color: Lib_TCS34725_LRGB_ALL, Initialization: boolean) {
        TCS34725_Color_Color_Def = Color
        if (Color == 4) {
            GetValueMin(0, Initialization)
            GetValueMin(1, Initialization)
            GetValueMin(2, Initialization)
            GetValueMin(3, Initialization)
        } else {
            GetValueMin(TCS34725_Color_Color_Def, Initialization)
        }
    }

    function GetValueMaxALL(Color: Lib_TCS34725_LRGB_ALL, Initialization: boolean) {
        TCS34725_Color_Color_Def = Color
        if (Color == 4) {
            GetValueMax(0, Initialization)
            GetValueMax(1, Initialization)
            GetValueMax(2, Initialization)
            GetValueMax(3, Initialization)
        } else {
            GetValueMax(TCS34725_Color_Color_Def, Initialization)
        }
    }

    //% weight=1000
    //% inlineInputMode=inline
    //%block="TCS34725の起動 "
    export function Setup() {
        TCS34725_ADDRESS = TCS34725_I2C[Port]
        pins.i2cWriteNumber(
            TCS34725_ADDRESS,
            146,
            NumberFormat.UInt8LE,
            true
        )
        pins.i2cWriteNumber(
            TCS34725_ADDRESS,
            129,
            NumberFormat.UInt8LE,
            true
        )
        pins.i2cWriteNumber(
            TCS34725_ADDRESS,
            0,
            NumberFormat.UInt8LE,
            false
        )
        pins.i2cWriteNumber(
            TCS34725_ADDRESS,
            143,
            NumberFormat.UInt8LE,
            true
        )
        pins.i2cWriteNumber(
            TCS34725_ADDRESS,
            0,
            NumberFormat.UInt8LE,
            false
        )
        pins.i2cWriteNumber(
            TCS34725_ADDRESS,
            128,
            NumberFormat.UInt8LE,
            true
        )
        pins.i2cWriteNumber(
            TCS34725_ADDRESS,
            3,
            NumberFormat.UInt8LE,
            false
        )
        basic.pause(3)
    }

    //% weight=990
    //% inlineInputMode=inline
    //%block="TCS34725  $Color"
    export function Value(Color: Lib_TCS34725_LRGB) {
        GetValue(Port)
        return TCS34725_Total[Color];
    }

    //% weight=985
    //% Val.min=0 Val.max=1023
    //% inlineInputMode=inline
    //%block="TCS34725  $Color $Symbol $Val"
    export function Compare(Color: Lib_TCS34725_LRGB, Symbol: Lib_TCS34725_Symbol, Val: number) {
        if (Symbol == 0) {
            TCS34725_TF = Value(Color) == Val
        } else if (Symbol == 1) {
            TCS34725_TF = Value(Color) != Val
        } else if (Symbol == 2) {
            TCS34725_TF = Value(Color) < Val
        } else if (Symbol == 3) {
            TCS34725_TF = Value(Color) <= Val
        } else if (Symbol == 4) {
            TCS34725_TF = Value(Color) > Val
        } else if (Symbol == 5) {
            TCS34725_TF = Value(Color) >= Val
        }
        return TCS34725_TF;
    }

    //% weight=980
    //% inlineInputMode=inline
    //% block="TCS34725の $Color の値を表示"
    export function Show(Color: Lib_TCS34725_LRGB_ALL) {
        GetValue(Port)
        if (Color == 4) {
            serial.writeValue("Light", TCS34725_Total[0])
            serial.writeValue("R", TCS34725_Total[1])
            serial.writeValue("G", TCS34725_Total[2])
            serial.writeValue("B", TCS34725_Total[3])
        } else {
            serial.writeValue(TCS34725_Color_Name[Color], TCS34725_Total[Color])
        }
    }

    //% weight=970
    //% inlineInputMode=inline
    //%block="TCS34725の $Color の補正値"
    export function Offset(Color: Lib_TCS34725_LRGB) {
        TCS34725_AD_Cor = 100 * (Value(Color) - TCS34725_AD_MM[10 * Port + Color]) / (TCS34725_AD_MM[10 * Port + Color + 4] - TCS34725_AD_MM[10 * Port + Color])
        TCS34725_AD_Cor = Math.floor(TCS34725_AD_Cor * 100) / 100
        if (TCS34725_AD_Cor > 100) {
            TCS34725_AD_Cor = 100
        }
        if (TCS34725_AD_Cor < 0) {
            TCS34725_AD_Cor = 0
        }
        return TCS34725_AD_Cor;
    }

    //% weight=960
    //% Val.min=0 Val.max=1023
    //% inlineInputMode=inline
    //%block="TCS34725の $Color の補正値 $Symbol $Val"
    export function CompareOffset(Color: Lib_TCS34725_LRGB, Symbol: Lib_TCS34725_Symbol, Val: number) {
        if (Symbol == 0) {
            TCS34725_TF = Offset(Color) == Val
        } else if (Symbol == 1) {
            TCS34725_TF = Offset(Color) != Val
        } else if (Symbol == 2) {
            TCS34725_TF = Offset(Color) < Val
        } else if (Symbol == 3) {
            TCS34725_TF = Offset(Color) <= Val
        } else if (Symbol == 4) {
            TCS34725_TF = Offset(Color) > Val
        } else if (Symbol == 5) {
            TCS34725_TF = Offset(Color) >= Val
        }
        return TCS34725_TF;
    }

    //% weight=950
    //% inlineInputMode=inline
    //%block="TCS34725の $Color の補正値を表示"
    export function ShowOffset(Color: Lib_TCS34725_LRGB_ALL) {
        TCS34725_Color_Color_Def = Color
        if (Color == 4) {
            serial.writeValue("Light", Offset(0))
            serial.writeValue("Red", Offset(1))
            serial.writeValue("Green", Offset(2))
            serial.writeValue("Blue", Offset(3))
        } else {
            serial.writeValue(TCS34725_Color_Name[Color], Offset(TCS34725_Color_Color_Def))
        }
    }

    //% weight=940
    //% inlineInputMode=inline
    //%block="TCS34725の $Color の $MM を取得 初期化 $Initialization"
    export function Get(MM: Lib_TCS34725_MM, Color: Lib_TCS34725_LRGB_ALL, Initialization: boolean) {
        if (MM == 0) {
            GetValueMaxALL(Color, Initialization)
        } else {
            GetValueMinALL(Color, Initialization)
        }
    }

    //% weight=920
    //%block="TCS34725の $Color の補正変数の定義 最小値 $Min 最大値 $Max"
    //% inlineInputMode=inline
    export function Define(Color: Lib_TCS34725_LRGB, Min: number, Max: number) {
        TCS34725_AD_MM[10 * Port + Color] = Min
        TCS34725_AD_MM[10 * Port + Color + 4] = Max
    }

    //% weight=910
    //% inlineInputMode=inline
    //%block="TCS34725の補正変数を表示 "
    export function ShowVariable() {
        serial.writeLine("Light:" + convertToText(TCS34725_AD_MM[10 * Port]) + "," + convertToText(TCS34725_AD_MM[10 * Port + 4]))
        serial.writeLine("Red  :" + convertToText(TCS34725_AD_MM[10 * Port + 1]) + "," + convertToText(TCS34725_AD_MM[10 * Port + 5]))
        serial.writeLine("Green:" + convertToText(TCS34725_AD_MM[10 * Port + 2]) + "," + convertToText(TCS34725_AD_MM[10 * Port + 6]))
        serial.writeLine("Blue :" + convertToText(TCS34725_AD_MM[10 * Port + 3]) + "," + convertToText(TCS34725_AD_MM[10 * Port + 7]))
    }

    //% weight=900
    //% inlineInputMode=inline
    /**
     初期値：*1
     */
    //% block="ゲインの定義  $Gain"
    export function Gain(Gain: Lib_TCS34725_Gain) {
        if (Gain == 0) {
            Lib_TCS34725_Gain_Def = 0b00
        }
        if (Gain == 1) {
            Lib_TCS34725_Gain_Def = 0b01
        }
        if (Gain == 2) {
            Lib_TCS34725_Gain_Def = 0b10
        }
        if (Gain == 3) {
            Lib_TCS34725_Gain_Def = 0b11
        }
        pins.i2cWriteNumber(
            TCS34725_ADDRESS,
            143,
            NumberFormat.UInt8LE,
            true
        )
        pins.i2cWriteNumber(
            TCS34725_ADDRESS,
            Lib_TCS34725_Gain_Def,
            NumberFormat.UInt8LE,
            false
        )
    }
}

//ライブラリ：フォトリフレクタ
//Ver1.0.0
enum Lib_Photo_Reflector_Port {
    //% block="Port.0"
    Zero,
    //% block="Port.1"
    One,
}

enum Lib_Photo_Reflector_Symbol {
    //% block="="
    Zero,
    //% block="≠"
    One,
    //% block="<"
    Two,
    //% block="≦"
    Three,
    //% block=">"
    Four,
    //% block="≧"
    Five,
}

enum Lib_Photo_Reflector_MM {
    //% block="最大値"
    Zero,
    //% block="最小値"
    One,
}


//% color=#60249f
//% weight=10
//%block="フォトリフレクタ"
namespace Photo_Reflector {
    let Photo_Reflector_TF = false
    let Photo_Reflector_Val = 0
    let Photo_Reflector_TMP = 0
    let Photo_Reflector_I = 0
    let Photo_Reflector_J = 0
    let Photo_Reflector_Total = [0, 0, 0, 0, 0, 0, 0]
    let Photo_Reflector_Pin = [0, 0]
    let Photo_Reflector_Min = [0, 0]
    let Photo_Reflector_Max = [0, 0]

    function GetMin(Port: Lib_Photo_Reflector_Port, Initialization: boolean) {
        if (Initialization) {
            Photo_Reflector_Min[Port] = 2147483647
        }
        for (let index = 0; index < 10; index++) {
            Photo_Reflector_Val = Value(Port)
            if (Photo_Reflector_Val < Photo_Reflector_Min[Port]) {
                Photo_Reflector_Min[Port] = Photo_Reflector_Val
            }
            basic.pause(10)
        }
    }

    function GetMax(Port: Lib_Photo_Reflector_Port, Initialization: boolean) {
        if (Initialization) {
            Photo_Reflector_Max[Port] = 0
        }
        for (let index = 0; index < 10; index++) {
            Photo_Reflector_Val = Value(Port)
            if (Photo_Reflector_Val > Photo_Reflector_Max[Port]) {
                Photo_Reflector_Max[Port] = Photo_Reflector_Val
            }
            basic.pause(10)
        }
    }


    //% weight=1000
    //% Pin.min=0 Pin.max=16
    //%block="フォトリフレクタのピンの定義 $Port $Pin"
    export function Define(Port: Lib_Photo_Reflector_Port, Pin: number) {
        Photo_Reflector_Pin[Port] = Pin + 100
    }

    //% weight=990
    //%block="フォトリフレクタ $Port"
    export function Value(Port: Lib_Photo_Reflector_Port) {
        for (let index = 0; index < 7; index++) {
            Photo_Reflector_Total[index] = pins.analogReadPin(Photo_Reflector_Pin[Port])
        }
        for (let index = 0; index < 7; index++) {
            Photo_Reflector_J = Photo_Reflector_I + 1
            for (let index = 0; index < 7; index++) {
                if (Photo_Reflector_Total[Photo_Reflector_I] > Photo_Reflector_Total[Photo_Reflector_J]) {
                    Photo_Reflector_TMP = Photo_Reflector_Total[Photo_Reflector_I]
                    Photo_Reflector_Total[Photo_Reflector_I] = Photo_Reflector_Total[Photo_Reflector_J]
                    Photo_Reflector_Total[Photo_Reflector_J] = Photo_Reflector_TMP
                }
                Photo_Reflector_J += 1
            }
            Photo_Reflector_I += 1
        }
        return Photo_Reflector_Total[3]
    }

    //% weight=985
    //% Val.min=0 Val.max=1023
    //%block="フォトリフレクタ $Port $Symbol $Val"
    export function Compare(Port: Lib_Photo_Reflector_Port, Symbol: Lib_Photo_Reflector_Symbol, Val: number) {
        if (Symbol == 0) {
            Photo_Reflector_TF = Value(Port) == Val
        } else if (Symbol == 1) {
            Photo_Reflector_TF = Value(Port) != Val
        } else if (Symbol == 2) {
            Photo_Reflector_TF = Value(Port) < Val
        } else if (Symbol == 3) {
            Photo_Reflector_TF = Value(Port) <= Val
        } else if (Symbol == 4) {
            Photo_Reflector_TF = Value(Port) > Val
        } else if (Symbol == 5) {
            Photo_Reflector_TF = Value(Port) >= Val
        }
        return Photo_Reflector_TF;
    }

    //% weight=980
    //% block="フォトリフレクタの値を表示 $Port"
    export function Show(Port: Lib_Photo_Reflector_Port) {
        serial.writeValue("PR", Value(Port))
    }

    //% weight=970
    //%block="フォトリフレクタ 補正値 $Port"
    export function Offset(Port: Lib_Photo_Reflector_Port) {
        Photo_Reflector_Val = 100 * (Value(Port) - Photo_Reflector_Min[Port]) / (Photo_Reflector_Max[Port] - Photo_Reflector_Min[Port])
        Photo_Reflector_Val = Math.floor(Photo_Reflector_Val * 100) / 100
        if (Photo_Reflector_Val > 100) {
            Photo_Reflector_Val = 100
        }
        if (Photo_Reflector_Val < 0) {
            Photo_Reflector_Val = 0
        }
        return Photo_Reflector_Val;
    }

    //% weight=965
    //% Val.min=0 Val.max=100
    //%block="フォトリフレクタ 補正値 $Port $Symbol $Val"
    export function Photo_Reflector_Logic_AD(Port: Lib_Photo_Reflector_Port, Symbol: Lib_Photo_Reflector_Symbol, Val: number) {
        if (Symbol == 0) {
            Photo_Reflector_TF = Offset(Port) == Val
        } else if (Symbol == 1) {
            Photo_Reflector_TF = Offset(Port) != Val
        } else if (Symbol == 2) {
            Photo_Reflector_TF = Offset(Port) < Val
        } else if (Symbol == 3) {
            Photo_Reflector_TF = Offset(Port) <= Val
        } else if (Symbol == 4) {
            Photo_Reflector_TF = Offset(Port) > Val
        } else if (Symbol == 5) {
            Photo_Reflector_TF = Offset(Port) >= Val
        }
        return Photo_Reflector_TF;
    }

    //% weight=960
    //% block="フォトリフレクタの補正値を表示 $Port"
    export function Photo_Reflector_Show_AD(Port: Lib_Photo_Reflector_Port) {
        serial.writeValue("PR", Offset(Port))
    }

    //% weight=910
    //% block="フォトリフレクタの $MM を取得 $Port 初期化 $Initialization"
    export function Get(MM:Lib_Photo_Reflector_MM,Port: Lib_Photo_Reflector_Port, Initialization: boolean) {
        if(MM==0){
            GetMax(Port, Initialization)
        }else{
            GetMin(Port, Initialization)
        }
    }

    //% weight=895
    //%block="フォトリフレクタの補正変数の定義 $Port $Color 最小値 $Min 最大値 $Max"
    //% inlineInputMode=inline
    export function DefineOffset(Port: Lib_Photo_Reflector_Port, Min: number, Max: number) {
        Photo_Reflector_Min[Port] = Min
        Photo_Reflector_Max[Port] = Max
    }

    //% weight=890
    //%block="フォトリフレクタの補正変数を表示 $Port"
    export function ShowVariable(Port: Lib_Photo_Reflector_Port): void {
        serial.writeLine("PR:Port." + convertToText(Port) + "," + convertToText(Photo_Reflector_Min[Port]) + "," + convertToText(Photo_Reflector_Max[Port]))
    }
}